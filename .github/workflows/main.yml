name: Attendify Planning CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - test
      - main
  pull_request:
    branches:
      - test
      - main

jobs:
  docker-ci:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Create service-account.json from GitHub Secret
      - name: Create service account JSON
        run: |
          mkdir -p planning
          echo "${{ secrets.SERVICE_ACCOUNT_JSON }}" > planning/service-account.json

      # 3. Build Docker image
      - name: Build Docker image
        run: |
          docker build -t attendify-planning planning/

      # 4. Run Docker container with secrets
      - name: Run Docker container with secrets
        run: |
          docker run -d --rm \
            -v ${{ github.workspace }}/planning/service-account.json:/app/service-account.json \
            -e GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
            -e GOOGLE_CALENDAR_ID=${{ secrets.GOOGLE_CALENDAR_ID }} \
            -e GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }} \
            -p 5000:5000 \
            --name attendify-planning-container \
            attendify-planning
          
          # Give time to start
          sleep 5

      # 5. Test the API endpoint (Basic test)
      - name: Test API endpoint
        run: |
          curl --request POST \
            --header "Content-Type: application/json" \
            --data '{"summary":"Test Event","start":"2025-03-22T09:00:00","end":"2025-03-22T10:00:00"}' \
            http://localhost:5000/create-event || exit 1

      # 6. Stop Docker container after test
      - name: Stop Docker container
        run: |
          docker stop attendify-planning-container

  # Deploy to test only on the test branch
  deploy-test:
    name: Deploy to Test Server
    runs-on: ubuntu-latest
    needs: docker-ci
    if: github.ref == 'refs/heads/test'  
    steps:
      - name: Deploy to test via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 60022
          script: |
            cd ~/attendify/test-environment/testing-Planning/Untitled/planning
            git pull origin test
            docker compose down
            docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d --build

    # Deploy to production only on the main branch
  deploy-prod:
      name: Deploy to Production Server
      runs-on: ubuntu-latest
      needs: docker-ci
      if: github.ref == 'refs/heads/main' 
      steps:
        - name: Deploy to production via SSH
          uses: appleboy/ssh-action@v1.0.3
          with:
            host: ${{ secrets.SERVER_HOST }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: 60022
            script: |
              cd ~/attendify/Untitled/planning
              git pull origin main
              docker compose down
              docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
  
  
  